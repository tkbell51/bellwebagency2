$p-blue: #081728;
$black: #1a1918;

$primary-color: $black;
$primary-light: lighten($primary-color, 10%);
$primary-very-light: lighten($primary-color, 30%);

$white: #fff;
$black: #1a1918;
$light-black: #424242;
$grey: #dbdbdb;

$body-text-dark-bg: $grey;

$secondary-color: #d5893d;
$secondary-color-light: lighten($secondary-color, 10%);
$secondary-color-very-light: lighten($secondary-color, 30%);
$secondary-color-dark: darken($secondary-color, 10%);

$bg-color: #fcfcfc;

$hero-gradient: radial-gradient(
  circle farthest-side at 80% 100%,
  rgba($light-black, 0.8),
  rgba($black, 0.9)
);
$section-gradient: radial-gradient(
  circle farthest-side at 80% 100%,
  $light-black,
  $black
);

$font-color: $black;
$transition: all 0.4s;

$box-shadow: 0 1px 2px rgba($primary-color, 80%);

//header
$header-font-color: $white;
$raise-btn: translateY(-5px);

$default-font-size: 1.6rem;

$new-color: #d5893d;

$bg-arrow: polygon(0 0, 50% 15%, 100% 0, 100% 80%, 0 80%);


@mixin respond($breakpoint) {
    @if $breakpoint==phone {
        @media only screen and (max-width: 40.375em) {
            @content;
        } //646px
    }

    @if $breakpoint==tab-small {
        @media only screen and (max-width: 49.6875em) {
            @content;
        } //794
    }

    @if $breakpoint==tab-port {
        @media only screen and (max-width: 56.25em) {
            @content;
        } //900px
    }

    @if $breakpoint==tab-mid {
        @media only screen and (max-width: 64em) {
            @content;
        } //978px for .popup
    }

    @if $breakpoint==tab-land {
        @media only screen and (max-width: 75em) {
            @content;
        } //1200px
    }

    @if $breakpoint==big-desktop {
        @media (min-width: 112.5em) {
            @content;
        } //1800px
    }
}


@mixin absCenter {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

@mixin gradientBg($direction, $startColor, $endColor) {
  background: $startColor;
  background: -moz-linear-gradient(
    $direction,
    $startColor 0%,
    $endColor 80%,
    $endColor 100%
  );
  background: -webkit-linear-gradient(
    $direction,
    $startColor 0%,
    $endColor 80%,
    $endColor 100%
  );
  background: linear-gradient(
    $direction,
    $startColor 0%,
    $endColor 80%,
    $endColor 100%
  );
}
@mixin fluid-type($min-vw, $max-vw, $min-value, $max-value) {
  $factor: 1 / ($max-vw - $min-vw) * ($max-value - $min-value);
  $calc-value: unquote(
    "#{ $min-value - ($min-vw * $factor) } + #{ 100vw * $factor }"
  );

  font-size: $min-value; // Fallback for older browsers
  font-size: clamp(
    #{if($min-value > $max-value, $max-value, $min-value)},
    #{$calc-value},
    #{if($min-value > $max-value, $min-value, $max-value)}
  );
}


$preferred_viewport_width: 1000px;

@function strip-units($number) {
  @return $number / ($number * 0 + 1);
}

@function calculateRem($size) {
  $remSize: $size / 16px;
  @return #{$remSize}rem;
}

@function calculateClamp($minimum, $preferred, $maximum) {
  $clamp_parameter_1: calculateRem($minimum);
  $clamp_parameter_2: strip-units(
      (($preferred + 0) / $preferred_viewport_width) * 100
    ) * 1vw;
  $clamp_parameter_3: calculateRem($maximum);

  @return clamp(
    #{$clamp_parameter_1},
    #{$clamp_parameter_2},
    #{$clamp_parameter_3}
  );
}

/* The font will be at the preferred size on 1000 pixel wide viewports by default. */
@mixin pixelsToFluidText($minimum, $preferred, $maximum) {
  /* Fallback for IE11 */
  font-size: calculateRem($preferred);
  /* Modern browsers */
  font-size: calculateClamp(
    $minimum,
    $preferred,
    $maximum,
    $preferred_viewport_width
  );
}

@mixin responsive-gutter-1x($direction: bottom, $gutter: 36px) {
  @if $direction == top {
    margin-top: $gutter;
    margin-top: calculateClamp(($gutter/2), ($gutter * 0.75), $gutter);
  } @else if $direction == bottom {
    margin-bottom: $gutter;
    margin-bottom: calculateClamp(($gutter/2), ($gutter * 0.75), $gutter);
  } @else {
    @error "Unknown direction #{$direction}.";
  }
}

@mixin responsive-gutter-2x($direction: bottom, $gutter: 36px) {
  @if $direction == top {
    margin-top: ($gutter * 2);
    margin-top: calculateClamp($gutter, ($gutter * 1.5), ($gutter * 2));
  } @else if $direction == bottom {
    margin-bottom: ($gutter * 2);
    margin-bottom: calculateClamp($gutter, ($gutter * 1.5), ($gutter * 2));
  } @else {
    @error "Unknown direction #{$direction}.";
  }
}


